=================================================================
üì± C√ìDIGO PARA PROBAR EL WEBHOOK INMEDIATAMENTE
=================================================================

OPCI√ìN 1: Agregar en MainActivity.onCreate() (L√≠nea 67)
---------------------------------------------------------
Agrega esta l√≠nea despu√©s de "testWebhookConnection();" (l√≠nea 67):

    probarNuevoWebhook();

Luego agrega este m√©todo al final de la clase MainActivity:

    private void probarNuevoWebhook() {
        WebhookHelper webhook = new WebhookHelper();
        
        webhook.sendGetRequest(new WebhookHelper.WebhookListener() {
            @Override
            public void onSuccess(String response, int code) {
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, 
                        "‚úÖ Webhook conectado - C√≥digo: " + code, 
                        Toast.LENGTH_LONG).show();
                    Log.d(TAG, "Respuesta webhook: " + response);
                });
            }
            
            @Override
            public void onError(String error, int code) {
                runOnUiThread(() -> {
                    Toast.makeText(MainActivity.this, 
                        "‚ùå Error: " + error + " (C√≥digo: " + code + ")", 
                        Toast.LENGTH_LONG).show();
                    Log.e(TAG, "Error webhook: " + error);
                });
            }
        });
    }


=================================================================
OPCI√ìN 2: Crear un Bot√≥n de Prueba
=================================================================

1. En activity_main.xml, agrega este bot√≥n:

    <Button
        android:id="@+id/btn_test_webhook"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Probar Webhook"
        android:layout_margin="16dp" />

2. En MainActivity.initializeViews() (l√≠nea 76), agrega:

    Button btnTestWebhook = findViewById(R.id.btn_test_webhook);

3. En MainActivity.setupClickListeners() (l√≠nea 314), agrega:

    btnTestWebhook.setOnClickListener(v -> {
        WebhookHelper webhook = new WebhookHelper();
        
        webhook.sendGetRequest(new WebhookHelper.WebhookListener() {
            @Override
            public void onSuccess(String response, int code) {
                Toast.makeText(MainActivity.this, 
                    "‚úÖ Conectado exitosamente", 
                    Toast.LENGTH_SHORT).show();
            }
            
            @Override
            public void onError(String error, int code) {
                Toast.makeText(MainActivity.this, 
                    "‚ùå Error: " + error, 
                    Toast.LENGTH_SHORT).show();
            }
        });
    });


=================================================================
OPCI√ìN 3: C√≥digo Independiente (M√°s Simple)
=================================================================

Puedes probar desde cualquier Activity con solo 1 l√≠nea:

new WebhookHelper().sendGetRequest(new WebhookHelper.WebhookListener() {
    public void onSuccess(String response, int code) {
        Toast.makeText(getApplicationContext(), "‚úÖ OK", Toast.LENGTH_SHORT).show();
    }
    public void onError(String error, int code) {
        Toast.makeText(getApplicationContext(), "‚ùå " + error, Toast.LENGTH_SHORT).show();
    }
});


=================================================================
OPCIONES DE ENV√çO
=================================================================

GET (sin datos):
    webhook.sendGetRequest(listener);

POST (con datos):
    String datos = "{\"usuario\": \"test\", \"accion\": \"prueba\"}";
    webhook.sendPostRequest(datos, listener);

POST (vac√≠o):
    webhook.sendPostRequest(null, listener);


=================================================================
QU√â ESPERAR
=================================================================

‚úÖ Conexi√≥n exitosa:
   - Toast: "Webhook conectado - C√≥digo: 200"
   - Log: Muestra la respuesta del servidor

‚ùå Error 404:
   - Toast: "Error: C√≥digo de error: 404"
   - Significa: URL incorrecta o webhook inactivo

‚ùå Error de conexi√≥n:
   - Toast: "Error: Failed to connect..."
   - Significa: Sin internet o servidor no responde


=================================================================
ARCHIVOS CREADOS
=================================================================

‚úÖ WebhookHelper.java
   - Clase principal para conectar al webhook
   - Ubicaci√≥n: app/src/main/java/com/example/prueba/

‚úÖ EjemploConexionWebhook.java
   - Ejemplos de uso con diferentes m√©todos
   - Ubicaci√≥n: app/src/main/java/com/example/prueba/

‚úÖ GUIA_CONEXION_WEBHOOK.md
   - Documentaci√≥n completa en espa√±ol
   - Ubicaci√≥n: PRUEBA221/


=================================================================
CONFIGURACI√ìN YA LISTA
=================================================================

‚úÖ AndroidManifest.xml
   - Permisos INTERNET y ACCESS_NETWORK_STATE (l√≠neas 5-6)

‚úÖ build.gradle.kts
   - OkHttp 4.12.0 (l√≠nea 68)
   - OkHttp Logging Interceptor (l√≠nea 69)


=================================================================
¬°LISTO PARA USAR! üöÄ
=================================================================

Solo elige una de las opciones anteriores y prueba.
La conexi√≥n se ejecuta autom√°ticamente en segundo plano.
No necesitas AsyncTask, Thread, ni configuraci√≥n adicional.

